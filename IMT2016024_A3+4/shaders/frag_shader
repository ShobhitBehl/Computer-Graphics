#version 330 core

in vec3 Normal;
in vec3 FragPos;
in vec2 texCoord;

out vec4 FragColor;
uniform int on;
uniform vec3 lightPos;
uniform sampler2D textureID;
uniform int source;
uniform mat4 model;

vec4 objectColor = texture(textureID, texCoord);
vec4 temp = vec4(0.0, 0.0, 0.0, 0.0);

void main()
{
    vec3 transformedLightPos = vec3(model * vec4(lightPos, 1.0));  
    if(source == 0)
    {
        if(on == 1)
        {
            vec3 lightColor = vec3(1.0, 1.0, 1.0);
            float ambientStrength = 0.3;
            float diffuseStrength = 0.7;

            vec3 lightVector = normalize(transformedLightPos - FragPos);
            float distance = length(transformedLightPos - FragPos);

            vec3 ambient = lightColor * ambientStrength;

            vec3 reflection = reflect(lightVector, Normal);

            float diffuse = max(0, dot(normalize(Normal), lightVector));

            float alpha = 100;

            vec3 view = vec3(0, 0, 1);

            float specular = pow(max(0, dot(view, reflection)), alpha);

            float distanceAttenuation = 1/(1 + 0.1 * distance + 0.05 * distance * distance);

            temp = temp + objectColor * vec4(ambient, 1.0) +
                        distanceAttenuation * diffuse * objectColor * diffuseStrength +
                        distanceAttenuation* objectColor * specular;
        }
        else
        {
            temp = temp + objectColor*vec4(0.0, 0.0, 0.0, 1.0f);
        }
        FragColor = temp;
    }
    else
    {
       FragColor = vec4(1.0, 1.0, 1.0, 1.0);
    }
}